name: 🚀 Staging Deployment

on:
  push:
    branches: [staging]
  pull_request:
    branches: [staging]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_PREFIX: ${{ secrets.DOCKER_USERNAME }}/gigalike

jobs:
  build-and-push:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [
          api-gateway,
          auth-service,
          config-server,
          eureka-server,
          marketing-service,
          order-service,
          payment-service,
          platform-service,
          product-service
        ]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 🏗️ Build All Services (root POM approach)
        run: |
          chmod +x ./scripts/build-all.sh
          ./scripts/build-all.sh

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:staging-latest
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Create Environment File
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            echo "🔧 Creating .env file for staging environment..."
            
            # Navigate to application directory
            mkdir -p /opt/gigalike && cd /opt/gigalike
            
            # Backup current .env if exists
            if [ -f .env ]; then
              cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
              echo "📦 Backed up existing .env file"
            fi
            
            # Create .env file from secret
            cat > .env << 'EOF'
            ${{ secrets.STAGING_ENV_FILE }}
            EOF
            
            echo "✅ Environment file created successfully!"

      - name: Install WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard

      - name: Start WireGuard client
        run: |
          sudo apt update && sudo apt install -y wireguard-tools
          echo "${{ secrets.WG_CONF }}" > wg0.conf
          sudo wg-quick up wg0.conf

      - name: 🚀 Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script_stop: true
          script: |
            echo "🚀 Starting deployment to staging environment..."
            
            # Navigate to application directory
            cd /opt/gigalike || (echo "❌ Directory /opt/gigalike not found" && exit 1)
            
            # Verify .env file was created
            if [ ! -f .env ]; then
              echo "❌ .env file not found"
              exit 1
            fi
            
            echo "✅ Environment file ready for deployment"
            
            # Login to Docker Hub
            echo "🔐 Logging into Docker Hub..."
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Pull latest images
            echo "📥 Pulling latest Docker images..."
            docker pull ${{ env.IMAGE_PREFIX }}-api-gateway:staging-latest
            docker pull ${{ env.IMAGE_PREFIX }}-auth-service:staging-latest
            docker pull ${{ env.IMAGE_PREFIX }}-config-server:staging-latest
            docker pull ${{ env.IMAGE_PREFIX }}-eureka-server:staging-latest
            docker pull ${{ env.IMAGE_PREFIX }}-marketing-service:staging-latest
            docker pull ${{ env.IMAGE_PREFIX }}-order-service:staging-latest
            docker pull ${{ env.IMAGE_PREFIX }}-payment-service:staging-latest
            docker pull ${{ env.IMAGE_PREFIX }}-platform-service:staging-latest
            docker pull ${{ env.IMAGE_PREFIX }}-product-service:staging-latest
            
            # Check if deploy script exists
            if [ ! -f scripts/deploy.sh ]; then
              echo "❌ scripts/deploy.sh not found"
              exit 1
            fi
            
            # Make script executable
            chmod +x scripts/deploy.sh
            
            echo "🚀 Running deployment script..."
            ./scripts/deploy.sh core
            
            echo "✅ Staging deployment completed!"

      - name: 🧪 Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            echo "🔍 Performing health checks..."
            
            # Wait for services to start
            sleep 30
            
            # Check core services
            services=("8761" "8888" "8080")
            for port in "${services[@]}"; do
              if curl -f -s http://localhost:$port/actuator/health > /dev/null; then
                echo "✅ Service on port $port is healthy"
              else
                echo "❌ Service on port $port is not responding"
              fi
            done
            
            echo "🎉 Health check completed!"

      - name: 📢 Notify Deployment Status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 *Staging Deployment*
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Status: ${{ job.status }}
            
            🔗 [View Deployment](https://staging.gigalike.com)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan:
    permissions: write-all
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
