name: 🚀 Production Deployment

on:
  push:
    branches: [main]
  release:
    types: [published]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_PREFIX: ${{ secrets.DOCKER_USERNAME }}/gigalike

jobs:
  security-and-quality:
    name: 🔒 Security & Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 🔍 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'gigalike-microservices'
          path: '.'
          format: 'ALL'
        env:
          JAVA_HOME: /opt/jdk

      - name: 📊 Upload OWASP Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  build-and-push-prod:
    name: 🏗️ Build & Push Production Images
    runs-on: ubuntu-latest
    needs: [security-and-quality]
    
    strategy:
      matrix:
        service: [
          api-gateway,
          auth-service,
          config-server,
          eureka-server,
          marketing-service,
          order-service,
          payment-service,
          platform-service,
          product-service
        ]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 🏗️ Build All Services (root POM approach)
        run: |
          chmod +x ./scripts/build-all.sh
          ./scripts/build-all.sh

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and Push Production Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:production-latest
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:production-${{ github.sha }}
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 🔍 Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  deploy-production:
    name: 🚀 Production Deployment
    runs-on: ubuntu-latest
    needs: [security-and-quality, build-and-push-prod]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://api.gigalike.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛑 Production Deployment Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "🚀 Production Deployment Approval Required"
          issue-body: |
            Please review and approve the production deployment.
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}

      - name: 🔧 Create Production Environment File
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            echo "🔧 Creating .env file for production environment..."
            
            # Navigate to application directory
            mkdir -p /opt/gigalike && cd /opt/gigalike
            
            # Backup current .env if exists
            if [ -f .env ]; then
              cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
              echo "📦 Backed up existing .env file"
            fi
            
            # Create .env file from secret
            cat > .env << 'EOF'
            ${{ secrets.PROD_ENV_FILE }}
            EOF
            
            echo "✅ Production environment file created successfully!"

      - name: 🚀 Production Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script_stop: true
          script: |
            echo "🚀 Starting production deployment..."
            
            # Navigate to application directory
            cd /opt/gigalike || (echo "❌ Directory /opt/gigalike not found" && exit 1)
            
            # Verify .env file was created
            if [ ! -f .env ]; then
              echo "❌ .env file not found"
              exit 1
            fi
            
            echo "✅ Environment file ready for deployment"
            
            # Login to Docker Hub
            echo "🔐 Logging into Docker Hub..."
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Pull latest images
            echo "📥 Pulling latest Docker images..."
            docker pull ${{ env.IMAGE_PREFIX }}-api-gateway:production-latest
            docker pull ${{ env.IMAGE_PREFIX }}-auth-service:production-latest
            docker pull ${{ env.IMAGE_PREFIX }}-config-server:production-latest
            docker pull ${{ env.IMAGE_PREFIX }}-eureka-server:production-latest
            docker pull ${{ env.IMAGE_PREFIX }}-marketing-service:production-latest
            docker pull ${{ env.IMAGE_PREFIX }}-order-service:production-latest
            docker pull ${{ env.IMAGE_PREFIX }}-payment-service:production-latest
            docker pull ${{ env.IMAGE_PREFIX }}-platform-service:production-latest
            docker pull ${{ env.IMAGE_PREFIX }}-product-service:production-latest
            
            # Check if deploy script exists
            if [ ! -f scripts/deploy.sh ]; then
              echo "❌ scripts/deploy.sh not found"
              exit 1
            fi
            
            # Make script executable
            chmod +x scripts/deploy.sh
            
            echo "🚀 Running production deployment..."
            ./scripts/deploy.sh core
            
            echo "✅ Production deployment completed successfully!"

      - name: 🧪 Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            echo "🔍 Performing health checks..."
            
            # Wait for services to start
            sleep 30
            
            # Check core services
            services=("8761" "8888" "8080")
            for port in "${services[@]}"; do
              if curl -f -s http://localhost:$port/actuator/health > /dev/null; then
                echo "✅ Service on port $port is healthy"
              else
                echo "❌ Service on port $port is not responding"
              fi
            done
            
            echo "🎉 Health check completed!"

      - name: 🧪 Production Smoke Tests
        run: |
          echo "🧪 Running production smoke tests..."
          # External health checks
          curl -f https://api.gigalike.com/actuator/health
          curl -f https://api.gigalike.com/api/products/public

      - name: 📊 Update Monitoring Dashboards
        run: |
          echo "📊 Updating monitoring dashboards..."
          # Update monitoring systems about new deployment
          curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment": "production",
              "version": "${{ github.sha }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "status": "deployed"
            }'

      - name: 📢 Notify Successful Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#production'
          text: |
            🎉 *Production Deployment Successful!*
            
            📦 Repository: ${{ github.repository }}
            🌿 Branch: ${{ github.ref_name }}
            💾 Commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
            
            🔗 [Production Site](https://gigalike.com)
            📊 [Monitoring Dashboard](https://monitoring.gigalike.com)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: 🔄 Rollback (Manual Trigger)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
      - name: 🔄 Rollback Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            echo "🔄 Starting production rollback..."
            # Implement rollback logic
            cd /opt/gigalike-rollback
            docker-compose up -d
            echo "✅ Rollback completed"
