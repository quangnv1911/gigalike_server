name: 🚀 Production Deployment

on:
  push:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 🧪 Production Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
      
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd="echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 27017:27017

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 🔍 Run Full Test Suite
        run: |
          echo "🧪 Running comprehensive test suite..."
          mvn clean verify -B
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/test_db
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: password

      - name: 📊 Code Coverage Report
        uses: codecov/codecov-action@v3
        with:
          files: target/site/jacoco/jacoco.xml
          flags: unittests

  security-and-quality:
    name: 🔒 Security & Quality Gates
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 🔍 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'gigalike-microservices'
          path: '.'
          format: 'ALL'
        env:
          JAVA_HOME: /opt/jdk

      - name: 📊 Upload OWASP Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  build-and-push-prod:
    name: 🏗️ Build Production Images
    runs-on: ubuntu-latest
    needs: [test, security-and-quality]
    
    strategy:
      matrix:
        service: [
          eureka-server,
          config-server, 
          api-gateway,
          auth-service,
          product-service,
          order-service,
          payment-service,
          platform-service
        ]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 🏗️ Build Parent Project
        run: mvn clean install -DskipTests

      - name: 🏗️ Build Service
        working-directory: ./${{ matrix.service }}
        run: mvn clean package -DskipTests -Pprod

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🏗️ Build and push Production Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 🔍 Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  deploy-production:
    name: 🚀 Production Deployment
    runs-on: ubuntu-latest
    needs: [test, security-and-quality, build-and-push-prod]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://api.gigalike.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛑 Production Deployment Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "🚀 Production Deployment Approval Required"
          issue-body: |
            Please review and approve the production deployment.
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}

      - name: 🔧 Setup Production Environment
        run: |
          cat > .env.production << EOF
          # Database Configuration
          MYSQL_ROOT_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}
          MONGODB_ROOT_PASSWORD=${{ secrets.PROD_MONGODB_PASSWORD }}
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
          
          # OAuth2 Configuration
          GOOGLE_CLIENT_ID=${{ secrets.PROD_GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}
          
          # Email Configuration
          MAIL_USERNAME=${{ secrets.PROD_MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.PROD_MAIL_PASSWORD }}
          
          # Payment Gateway (Live Keys)
          STRIPE_SECRET_KEY=${{ secrets.PROD_STRIPE_SECRET_KEY }}
          PAYPAL_CLIENT_ID=${{ secrets.PROD_PAYPAL_CLIENT_ID }}
          PAYPAL_CLIENT_SECRET=${{ secrets.PROD_PAYPAL_CLIENT_SECRET }}
          
          # Environment
          ENVIRONMENT=production
          LOG_LEVEL=INFO
          EOF

      - name: 🚀 Blue-Green Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            echo "🚀 Starting Blue-Green Production Deployment..."
            
            # Set variables
            BLUE_ENV="/opt/gigalike-blue"
            GREEN_ENV="/opt/gigalike-green"
            CURRENT_ENV="/opt/gigalike-current"
            
            # Determine current and new environment
            if [ -L "$CURRENT_ENV" ] && [ "$(readlink $CURRENT_ENV)" = "$BLUE_ENV" ]; then
                NEW_ENV="$GREEN_ENV"
                OLD_ENV="$BLUE_ENV"
                COLOR="GREEN"
            else
                NEW_ENV="$BLUE_ENV"
                OLD_ENV="$GREEN_ENV"
                COLOR="BLUE"
            fi
            
            echo "🎯 Deploying to $COLOR environment: $NEW_ENV"
            
            # Create new environment directory
            mkdir -p $NEW_ENV
            cd $NEW_ENV
            
            # Login to registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Copy compose file and pull images
            docker-compose -f docker-compose.prod.yml pull
            
            # Start new environment
            docker-compose -f docker-compose.prod.yml up -d
            
            # Health check
            echo "🔍 Performing health checks..."
            sleep 60
            for i in {1..10}; do
                if curl -f http://localhost:8080/actuator/health; then
                    echo "✅ Health check passed"
                    break
                fi
                echo "⏳ Health check attempt $i failed, retrying..."
                sleep 10
                if [ $i -eq 10 ]; then
                    echo "❌ Health check failed, rolling back..."
                    docker-compose -f docker-compose.prod.yml down
                    exit 1
                fi
            done
            
            # Update load balancer to point to new environment
            echo "🔄 Switching traffic to $COLOR environment..."
            rm -f $CURRENT_ENV
            ln -sf $NEW_ENV $CURRENT_ENV
            
            # Gracefully shutdown old environment
            if [ -d "$OLD_ENV" ]; then
                echo "🛑 Shutting down old environment..."
                cd $OLD_ENV
                docker-compose down --timeout 30
            fi
            
            echo "✅ Blue-Green deployment completed successfully!"

      - name: 🧪 Production Smoke Tests
        run: |
          echo "🧪 Running production smoke tests..."
          # Add your smoke tests here
          curl -f https://api.gigalike.com/actuator/health
          curl -f https://api.gigalike.com/api/products/public

      - name: 📊 Update Monitoring Dashboards
        run: |
          echo "📊 Updating monitoring dashboards..."
          # Update monitoring systems about new deployment
          curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment": "production",
              "version": "${{ github.sha }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "status": "deployed"
            }'

      - name: 📢 Notify Successful Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#production'
          text: |
            🎉 *Production Deployment Successful!*
            
            📦 Repository: ${{ github.repository }}
            🌿 Branch: ${{ github.ref_name }}
            💾 Commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
            
            🔗 [Production Site](https://gigalike.com)
            📊 [Monitoring Dashboard](https://monitoring.gigalike.com)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: 🔄 Rollback (Manual Trigger)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
      - name: 🔄 Rollback Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            echo "🔄 Starting production rollback..."
            # Implement rollback logic
            cd /opt/gigalike-rollback
            docker-compose up -d
            echo "✅ Rollback completed"
