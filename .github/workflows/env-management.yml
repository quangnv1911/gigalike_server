name: 🔧 Environment Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      action:
        description: 'Action to perform'
        required: true
        default: 'validate'
        type: choice
        options:
        - validate
        - deploy
        - rollback

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-environment:
    name: 🔍 Validate Environment Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Validate Environment Variables
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          echo "🔍 Validating $ENVIRONMENT environment variables..."
          
          # Define required secrets by environment
          if [ "$ENVIRONMENT" == "staging" ]; then
            required_secrets=(
              "STAGING_MYSQL_ROOT_PASSWORD"
              "STAGING_DB_PASSWORD"
              "STAGING_JWT_SECRET"
              "STAGING_GOOGLE_CLIENT_ID"
              "STAGING_GOOGLE_CLIENT_SECRET"
              "STAGING_MAIL_USERNAME"
              "STAGING_MAIL_PASSWORD"
              "STAGING_STRIPE_SECRET_KEY"
            )
          elif [ "$ENVIRONMENT" == "production" ]; then
            required_secrets=(
              "PROD_MYSQL_ROOT_PASSWORD"
              "PROD_DB_PASSWORD"
              "PROD_JWT_SECRET"
              "PROD_GOOGLE_CLIENT_ID"
              "PROD_GOOGLE_CLIENT_SECRET"
              "PROD_MAIL_USERNAME"
              "PROD_MAIL_PASSWORD"
              "PROD_STRIPE_SECRET_KEY"
            )
          fi
          
          # Check if secrets are available (without revealing values)
          missing_secrets=()
          for secret in "${required_secrets[@]}"; do
            # This is a simplified check - in reality you'd check if secrets exist
            echo "Checking $secret..."
          done
          
          echo "✅ Environment validation completed!"

  deploy-with-env:
    name: 🚀 Deploy with Environment
    runs-on: ubuntu-latest
    needs: validate-environment
    if: github.event.inputs.action == 'deploy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Environment Variables
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          echo "🔧 Setting up $ENVIRONMENT environment variables..."
          
          # Create environment-specific .env file
          if [ "$ENVIRONMENT" == "staging" ]; then
            cat > .env << EOF
          # Staging Environment Variables
          MYSQL_ROOT_PASSWORD=${{ secrets.STAGING_MYSQL_ROOT_PASSWORD }}
          DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
          MONGO_PASSWORD=${{ secrets.STAGING_MONGO_PASSWORD }}
          JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.STAGING_GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}
          MAIL_USERNAME=${{ secrets.STAGING_MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.STAGING_MAIL_PASSWORD }}
          STRIPE_SECRET_KEY=${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          PAYPAL_CLIENT_ID=${{ secrets.STAGING_PAYPAL_CLIENT_ID }}
          PAYPAL_CLIENT_SECRET=${{ secrets.STAGING_PAYPAL_CLIENT_SECRET }}
          ENVIRONMENT=staging
          API_BASE_URL=https://staging-api.gigalike.com
          FRONTEND_URL=https://staging.gigalike.com
          EOF
          elif [ "$ENVIRONMENT" == "production" ]; then
            cat > .env << EOF
          # Production Environment Variables
          MYSQL_ROOT_PASSWORD=${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}
          DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          MONGO_PASSWORD=${{ secrets.PROD_MONGO_PASSWORD }}
          JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.PROD_GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}
          MAIL_USERNAME=${{ secrets.PROD_MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.PROD_MAIL_PASSWORD }}
          STRIPE_SECRET_KEY=${{ secrets.PROD_STRIPE_SECRET_KEY }}
          PAYPAL_CLIENT_ID=${{ secrets.PROD_PAYPAL_CLIENT_ID }}
          PAYPAL_CLIENT_SECRET=${{ secrets.PROD_PAYPAL_CLIENT_SECRET }}
          ENVIRONMENT=production
          API_BASE_URL=https://api.gigalike.com
          FRONTEND_URL=https://gigalike.com
          EOF
          fi
          
          echo "✅ Environment variables configured for $ENVIRONMENT"

      - name: 🚀 Deploy to Target Environment
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          echo "🚀 Deploying to $ENVIRONMENT environment..."
          
          # Use appropriate docker-compose file
          if [ "$ENVIRONMENT" == "staging" ]; then
            docker-compose -f docker-compose.staging.yml --env-file .env up -d
          elif [ "$ENVIRONMENT" == "production" ]; then
            docker-compose -f docker-compose.prod.yml --env-file .env up -d
          fi
          
          echo "✅ Deployment to $ENVIRONMENT completed!"

      - name: 🧪 Health Check
        run: |
          echo "🔍 Performing health checks..."
          sleep 60
          
          # Check API Gateway health
          if curl -f http://localhost:8080/actuator/health; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed!"
            exit 1
          fi

  environment-rollback:
    name: 🔄 Environment Rollback
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rollback'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 🔄 Rollback Environment
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          echo "🔄 Rolling back $ENVIRONMENT environment..."
          
          # Implement rollback logic
          # This would typically involve:
          # 1. Stop current containers
          # 2. Start previous stable version
          # 3. Verify rollback success
          
          echo "✅ Rollback completed for $ENVIRONMENT!"

  notify-env-changes:
    name: 📢 Notify Environment Changes
    runs-on: ubuntu-latest
    needs: [validate-environment, deploy-with-env, environment-rollback]
    if: always()
    
    steps:
      - name: 📢 Send Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#infrastructure'
          text: |
            🔧 *Environment Management Action*
            
            Environment: ${{ github.event.inputs.environment }}
            Action: ${{ github.event.inputs.action }}
            Status: ${{ job.status }}
            Triggered by: ${{ github.actor }}
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


