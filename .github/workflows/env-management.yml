name: 🔧 Environment Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_PREFIX: ${{ secrets.DOCKER_USERNAME }}/gigalike

jobs:
  validate-inputs:
    name: ✅ Validate Inputs
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Validate Environment and Action
        run: |
          echo "🎯 Environment: ${{ github.event.inputs.environment }}"
          echo "⚡ Action: ${{ github.event.inputs.action }}"
          
  build-and-push:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: github.event.inputs.action == 'deploy'
    
    strategy:
      matrix:
        service: [
          api-gateway,
          auth-service, 
          config-server,
          eureka-server,
          marketing-service,
          order-service,
          payment-service,
          platform-service,
          product-service
        ]
        
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 🏗️ Build Parent Project
        run: mvn clean install -DskipTests

      - name: 🏗️ Build Service
        working-directory: ./${{ matrix.service }}
        run: mvn clean package -DskipTests

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.event.inputs.environment }}-latest
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.event.inputs.environment }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: 🚀 Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-and-push]
    if: github.event.inputs.action == 'deploy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Create Environment File
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_HOST || secrets.PROD_HOST }}
          username: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_USERNAME || secrets.PROD_USERNAME }}
          key: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SSH_KEY || secrets.PROD_SSH_KEY }}
          port: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_PORT || secrets.PROD_PORT }}
          script: |
            echo "🔧 Creating .env file for ${{ github.event.inputs.environment }} environment..."
            
            # Navigate to application directory
            mkdir -p /opt/gigalike && cd /opt/gigalike
            
            # Backup current .env if exists
            if [ -f .env ]; then
              cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
              echo "📦 Backed up existing .env file"
            fi
            
            # Create .env file from secret
            if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
              cat > .env << 'EOF'
            ${{ secrets.STAGING_ENV_FILE }}
            EOF
            elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
              cat > .env << 'EOF'
            ${{ secrets.PROD_ENV_FILE }}
            EOF
            fi
            
            echo "✅ Environment file created successfully!"

      - name: 🚀 Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        with:
          host: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_HOST || secrets.PROD_HOST }}
          username: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_USERNAME || secrets.PROD_USERNAME }}
          key: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SSH_KEY || secrets.PROD_SSH_KEY }}
          port: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_PORT || secrets.PROD_PORT }}
          script_stop: true
          script: |
            echo "🚀 Starting deployment to ${{ github.event.inputs.environment }} environment..."
            
            # Navigate to application directory
            cd /opt/gigalike || (echo "❌ Directory /opt/gigalike not found" && exit 1)
            
            # Verify .env file was created
            if [ ! -f .env ]; then
              echo "❌ .env file not found"
              exit 1
            fi
            
            echo "✅ Environment file ready for deployment"
            
            # Login to Docker Hub
            echo "🔐 Logging into Docker Hub..."
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Pull latest images
            echo "📥 Pulling latest Docker images..."
            docker pull ${{ env.IMAGE_PREFIX }}-api-gateway:${{ github.event.inputs.environment }}-latest
            docker pull ${{ env.IMAGE_PREFIX }}-auth-service:${{ github.event.inputs.environment }}-latest
            docker pull ${{ env.IMAGE_PREFIX }}-config-server:${{ github.event.inputs.environment }}-latest
            docker pull ${{ env.IMAGE_PREFIX }}-eureka-server:${{ github.event.inputs.environment }}-latest
            docker pull ${{ env.IMAGE_PREFIX }}-marketing-service:${{ github.event.inputs.environment }}-latest
            docker pull ${{ env.IMAGE_PREFIX }}-order-service:${{ github.event.inputs.environment }}-latest
            docker pull ${{ env.IMAGE_PREFIX }}-payment-service:${{ github.event.inputs.environment }}-latest
            docker pull ${{ env.IMAGE_PREFIX }}-platform-service:${{ github.event.inputs.environment }}-latest
            docker pull ${{ env.IMAGE_PREFIX }}-product-service:${{ github.event.inputs.environment }}-latest
            
            # Check if deploy script exists
            if [ ! -f scripts/deploy.sh ]; then
              echo "❌ scripts/deploy.sh not found"
              exit 1
            fi
            
            # Make script executable
            chmod +x scripts/deploy.sh
            
            echo "🚀 Running deployment script..."
            ./scripts/deploy.sh core
            
            echo "✅ Deployment completed successfully!"

      - name: 🧪 Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_HOST || secrets.PROD_HOST }}
          username: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_USERNAME || secrets.PROD_USERNAME }}
          key: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SSH_KEY || secrets.PROD_SSH_KEY }}
          port: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_PORT || secrets.PROD_PORT }}
          script: |
            echo "🔍 Performing health checks..."
            
            # Wait for services to start
            sleep 30
            
            # Check core services
            services=("8761" "8888" "8080")
            for port in "${services[@]}"; do
              if curl -f -s http://localhost:$port/actuator/health > /dev/null; then
                echo "✅ Service on port $port is healthy"
              else
                echo "❌ Service on port $port is not responding"
              fi
            done
            
            echo "🎉 Health check completed!"

  rollback:
    name: 🔄 Rollback ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest  
    needs: validate-inputs
    if: github.event.inputs.action == 'rollback'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 🔄 Execute Rollback
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_HOST || secrets.PROD_HOST }}
          username: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_USERNAME || secrets.PROD_USERNAME }}
          key: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_SSH_KEY || secrets.PROD_SSH_KEY }}
          port: ${{ github.event.inputs.environment == 'staging' && secrets.STAGING_PORT || secrets.PROD_PORT }}
          script: |
            echo "🔄 Starting rollback for ${{ github.event.inputs.environment }} environment..."
            
            # Navigate to application directory
            cd /opt/gigalike || (echo "❌ Directory /opt/gigalike not found" && exit 1)
            
            # Check if deploy script exists
            if [ ! -f scripts/deploy.sh ]; then
              echo "❌ scripts/deploy.sh not found"
              exit 1
            fi
            
            # Make script executable
            chmod +x scripts/deploy.sh
            
            # Stop current services
            echo "🛑 Stopping current services..."
            ./scripts/deploy.sh stop
            
            # Start services (rollback to previous state)
            echo "🔄 Starting services with previous configuration..."
            ./scripts/deploy.sh core
            
            echo "✅ Rollback completed!"